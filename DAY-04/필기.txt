


		Vim 
			#yum -y install vim
			#alias vi="vim"
			
			#cp /etc/services /practice/test
			// vi 연습을 위해 test 파일 생성
			
			#vi /practice/test
			
		유용한 단축키
			행 번호 출력
				:set number
				:set nu
			
			행 이동
				[#]gg - [#]번 라인으로 이동
					ex) 100gg
				[#]이 생략되면 1을 위미하여 파일의 첫 번째 라인으로 이동 
					ex) gg
				
				[#]G - [#]번 라인으로 이동
					ex) 100G    ( shift + g ) 
				
				[#]이 생략되면 마지막행을 의미하여 파일의 마지막으로 이동 
					ex) G 		( shift + g ) 
			
				:[#]  - [#]번 라인으로 이동
					ex) :100
			
			삭제
				x - 커서가 위치한 문자 삭제 (delete 키)
				dd - 커서가 위치한 한 라인 삭제
					ex) 10dd		// 커서가 위치한 곳으로 부터 10줄 삭제
					
			복사 (yank)
				yy - 커서가 위치한 라인을 복사
					ex) 3yy
			
			붙여넣기 (put)
				p - 커서가 위치한 다음행에 복사한 내용 붙여넣기
			
			기타 
				u        - undo 바로 이전 실행한 명령 취소
				Ctrl + r - redo 바로 이전에 취소 했던 명령 실행 
				
				:e!	- 편집한 내용을 저장하지 않고 파일을 다시 열기
				
				/[문자열] - 문자열 검색
					ex) /MAX 			// 해당 문서에 MAX를 찾아 블럭처리
							n - 다음으로 일치하는 문자열로 이동
							N - 이전으로 일치하는 문자열로 이동
							
							/domain
				
				:%s/[OLD]/[NEW]/g - 문자열 치환
					ex) :%s/tcp/udp/g
						
						// 해당 파일 내에서 tcp를 udp로 모두 변경해라
			
			vim 튜토리얼
			#vimtutor 	
			13시 30분 까지 진행 
			
		
		SSH 배너 설정 실습
			아래 조건에 만족하도록 설정 파일을 변경한다.
			
			파일명 : /etc/ssh/sshd_config
					 // ssh 서버 주 설정 파일
					 
			수정
				변경 전 - 129번행 #Banner none 
				변경 후 - 129번행 Banner /etc/issue.net
			
			파일명 : /etc/issue.net
				해당 파일내에 내용 모두 삭제 후, 공유 폴더에 위치한
				"배너 예제" 파일의 내용 중 (예제1, 2) 하나만 선택하여
				해당 파일에 복사 후 저장
				
				/etc/issue.net
					- ssh, telnet 등을 이용하여 원격에서 접속 후 패스워드를
					  입력하기전에 메세지를 표시하는데 사용되는 파일
				/etc/issue
					- 콘솔을 통해서 로그인 할 경우 메세지를 표시하는데
					  사용되는 파일
				/etc/motd 
					- 패스워드 입력 후 인증이 완료되면 보여질 메세지를 저장
					  하고 있는 파일
					  
				
			- 변경된 내용을 적용하기 위해 ssh 서버용 프로그램(데몬)을 재시작
			  #service sshd restart		// sshd 데몬 재시작
			  sshd 를 정지 중:          [  OK  ]
			  sshd (을)를 시작 중:      [  OK  ]

			  EX) A프로그램 
					용도 : A.txt 파일의 내용 출력
					파일명 : A.txt
					내용   : abc
					
					#A프로그램 실행
					abc					// abc 출력
					
					A.txt 파일의 내용을 변경
					abc -> 123
					
					#A프로그램 실행
					abc					// abc 출력
					
					A프로그램을 재시작 (중지 후 시작)을 하여
					설정 파일을 다시 로딩하여 새로운 내용을 적용시켜줘야한다.
					
					#A프로그램 실행
					123
					
		
		vi를 사용하여 파일 내용을 변경하던 중에, 세션 연결이 해제가 되나
		혹은 프로스세가 강제로 종료되는 경우에 vi는 기존에 변경된 내용을
		저장하고 있는 스왑(swap)파일을 생성한다.
		
		ex) .[파일명].swp 	// 해당 파일이 위치한 경로에 숨김파일 형태로 저장
		
			#vi /practice/test		-> /practice/.test.swp
		
		스왑 파일이 존재하면, 원본 파일을 수정하거나 새로만들려고 했을때
		복구와 관련된 메세지가 출력된다.
		
		#vim -r [파일명] 명령어로 파일을 복구, 스왑 파일을 삭제해야
		다음번 실행 시 동일한 메세지가 출력되지 않는다.
		
		----------------------------------------------------------------------
		환경 변수
			- 시스템이 동작(환경을 구성)하는데 필요한 프로그램이나, 스크립트가
			  참조하여 사용하는 변수
			  
			 
		스크립트(Script) 
			현실 대본 							리눅스 대본
				안녕하세요(웃으면서)			pwd
				잘지내요?						date
												ls
		#vi /practice/script_test.sh
		// 스크립트 파일에는 .sh 확장자를 붙이는것이 관례이다.
		
		#!/bin/bash			// 아래 작성된 내용을 실행 시킬 쉘 경로
							// 셔뱅/쉬방
		pwd
		date
		cal
		
		#sh [스크립트].sh 
		// 해당 스크립트 파일을 실행하겠다. 
		
		#sh /practice/script_test.sh
		
		중요한 환경 변수
			$PATH - 실행 파일을 찾을 경로
			$HOME - 현재 사용자의 홈디렉토리
			$LANG - 쉘 에서 사용하는 언어 형식
			$SHELL - 로그인 시 사용하는 쉘 파일의 경로
			$HISTSIZE - 히스토리 파일에 저장되는 명령어 개수
			$HISTFILE - 히스트로 파일의 경로
			$PS1 - 프롬프투 구조 정보를 가지고 있는 변수
			$TMOUT - 세션(로그인) 유지 시간
			
		지역 환경 변수
			- 현재 사용하는 쉘(로그인 쉘)에서만 적용되는 변수
		
			변수 선언 초기화
				변수명=값			ex) 변수명 = 값 (공백X)
				ex) A=10 		
				
			변수 해제
				#unset 변수명
				
			변수 선언 확인
				#set
				
			변수 값 확인
				#echo $변수명			// $ 변수임을 뜻하는 문자
			
			테스트
			#LOCAL=test				// 지역 환경 변수 LOCAL에 test 대입
			#set | grep "LOCAL" 	
			#echo $LOCAL
			test
			
			#/bin/bash 				// 서브 쉘 실행
			=============================================================
			#echo $LOCAL
			// 출력 결과가 없음
			#exit
			===============================================================
			#echo $LOCAL
			test					// 출력 결과 확인 
			
			- 변수를 선언한 쉘에서만 값을 참조할 수 있다.
		
		전역 환경 변수
	
			변수 선언 초기화
				#export 변수명=값
			
			변수 해제
				#unset
			
			변수 선언 확인
				#env 
				
			테스트
				#export GLOBAL=test
				// 전역 환경 변수 선언 및 초기화
			
				#echo "$GLOBAL"				// 로그인 쉘 
				test			
				#/bin/bash
				=========================================================
				#echo "$GLOBAL"
				test						// 서브쉘
				#exit
				=========================================================
				#echo $GLOBAL
				test
			
		$PS1 - 프롬프투 구조 정보를 가지고 있는 변수
		[\u@\h \w]\$  \u -> 로그인한 사용자 계정명
					  \h -> 호스트네임
					  \w -> 디렉토리 경로(마지막 경로명)
					  \$ -> root # , 그 외 $
					  
		프롬프트 구조 변경 해보기
			- 서식문자를 이용하여 변경해야하지만, 아직은 어렵기때문에
			  웹 사이트를 통해 만든다.
			  
			- 해당 사이트를 통해 만든 값을 메모장에 저장하기
				구글 -> bash generator -> http://bashrcgenerator.com/
				
				export PS1="[\u@\[\e[33m\]\h\[\e[m\] \W]\\$ "
			
		$PATH - 실행 파일을 찾을 경로
			
			#cd /practice/
			#cp /bin/ls /practice/123
			#ls
			123 		// 복사 확인
			
			ls -> abcdef			// 동일한 파일
			123 -> abcdef
			
			#123 
			bash: 123: command not found			
			
			#echo $PATH
			/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
			// 원본 PATH 변수 확인
			
			#echo $PATH
				1) PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/practice
				
				2)PATH=$PATH:/practice
			
			/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/practice
				
			#123		// ls 가 동작
			
			#123
			
			#PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin

			PATH 변수 원상 복구
			
			#/practice/123
			// 경로를 함께 사용하면 실행된다.
			
			
			시스템 초기화(환경을 구성) 스크립트 파일
			- 로그인 시 실행되는 스크립트 파일
				/etc/profile
				/etc/bashrc
				~/.bash_profile
				~/.bashrc
			
			동작 순서
			1. /etc/profile -> /etc/profile.d/* (모든 스크립트)
			2. ~/.bash_profile
			3. ~/.bashrc
			4. /etc/bashrc
			
			시스템 전체 적용되는 내용이 작성되어있는 스크립트
			/etc/bashrc, /etc/profile
			
			특정 사용자에게만 적용할 내용이 작성되어있는 스크립트
			~/.bash_profile, ~/.bashrc
			
			#vi ~/.bashrc
			alias vi="vim"					
			alias grep="grep --color=auto"
			export PS1="[\u@\[\e[33m\]\h\[\e[m\] \W]\\$"
			
			Xshell 스크립트 사용 설정 해제 한후, 다시 로그인 시도 시
			alias 설정을 하지않고 vi나grep 명령어를 사용할 수 있는 지 확인
			프롬프트가 변경되어있는지 확인.
			
			
		환경변수 테스트
			Server-A 서버에 root 계정으로 접속 후, #history 명령어를
			사용하여 이전에 root계정이 입력했던 명령어를 확인하려고했을때
			아무것도 출력되지 않도록 아래 환경변수를 이용하도록 설정
			
			$HISTFILE - 히스토리 파일의 경로
			
			해당 파일에 명령어 사용 내용이 로그아웃 시 저장이되며,
			로그인 시 해당 파일 내용을 #history 명령어가 사용한다.
			
			#echo $HISTFILE
			/root/.bash_history	
			
			#vi /root/.bashrc
			cat /dev/null > $HISTFILE
			
			// cat /dev/null > /root/.bash_history	
			// HISTFILE=/dev/null
			
			
			$TMOUT - 세션 유지 시간
			
			#TMOUT=3 
			// 3초동안 명령어 입력이 없을 경우 자동으로 해당 연결(세션)을
			   종료한다.
			
			// 자리비울때 Win + L 
			
			// root로 연결되어있는 상태에서 로그아웃을 하지 않고 
			   자리 비울때 자동으로 세션 종료하여 보안에 도움이 된다.
			   
			   
			
			
			
			
			
			
			