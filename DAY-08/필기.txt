	프로세스 (Process)
		- 커널의 관리하에 현재 시스템에서 동작중인 프로그램
		- 커널은 프로세스를 관리하기위해 각 프로세스에게 PCB 할당
		
		PCB (Process Control Block)
		- 프로세스 고유 번호 (PID)
		- 우선 순위 (Priority)
		- 현재 상태 (Crurrent Status)
		- 프로세스 제어하위한 여러 정보가 저장되어있다.
			
	프로세스 종류
		- 데몬 (daemon) 프로세스
			사용자에게 특정 기능이나, 서비스를 제공하는 프로그램이다. 
				데몬의 동작 형태
				
				standalone 
					- 독립적으로 메모리상에 항상 상주해 있는 형태로 리소스 소모는 많지만,
					  응답속도가 빠른 형태이다.
					  
				xinetd
					- xinetd 데몬에 의해서 관리가되는 형태, 다른 데몬을 관리한다고 해서
					  슈퍼데몬이라고도 불리우며, 사용자에 요청이 있을때만 실행되어 리소스
					  소모는 적지만, 응답속도가 느린 형태이다.
					  
					  리눅스 마스터 시험용 데몬
					  ALSA - 사운드 관련 데몬
					  CUPS - 프린터 관련 데몬
					  SANE - 스캐너 관련 데몬
			
			- init 프로세스
				부팅 시 가장 먼저 실행되어 시스템에 전반적인 설정하는 초기화 프로세스
					  
			- 부모(Parent) 프로세스 		  
				부모 프로세스는 다른 프로세스를 생성하며, init을 제외한
				모든 프로세스는 부모 프로세스를 가지고 있다.

			- 자식(Child) 프로세스
				부모 프로세스에 의해 생성된 프로세스이다.
				자식 프로세스는 작업을 완료하면 결과를 부모프로세스에게 전달하고,
				종료된다.
				
			- 고아(Orphan) 프로세스
				자식 프로세스보다 부모 프로세스가 먼저 종료 됬을때 자식 프로세스는
				고아 프로세스가 되어 init프로세스가 관리하게 된다.
				
			- 좀비(Zombie) 프로세스
				자식 프로세스의 종료 신호 부모 프로세스가 처리하지 못할 경우,
				자식 프로세스는 좀비 프로세스가 된다.
				
	#ps (Process Status) - 시스템에 동작중인 프로세스를 확인
		#ps [option]
			-e 모든 프로세스를 리스트 형태로 출력
			-f (full format) 다양한 형식(필드)으로 출력
			
			-a 다른 사용자들의 프로세스도 출력
			-u 사용자 이름, 시간 등 상세한 정보 출력
			-x 현재 실행되고 있는 모든 프로세스를 출력
		
		#ps -ef
		UID - 프로세스를 실행 시킨 프로세스의 소유자를 의미
		PID - 실행된 프로세스에 커널이 부여한 숫자(ID)
		PPID - Parent Process ID 부모 프로세스의 ID
		C - CPU 점유율 
		STIME - 프로세스가 시작된 시간
		TTY - 프로세스가 연결된 터미널 장치
		TIME - 프로세스에 의해 CPU가 사용된 시간
		CMD - 실행한 프로세스 명(이름/명령어)
		
	
	세션-1								세션-2
	#cp /etc/services /practice
	#vi /practice/services				#ps -ef
	
	[PID]  [PPID]						     [프로세스]
	1315   1270    0 21:31 pts/0    00:00:00 vim /practice/services				
		
	// 프로세스명 필드에 [프로세스명] "[ ]"으로 구성되어있는 프로세스는
       커널에서 동작하는 프로세스이다.

	kill - 프로세스에게 신호(SIGNAL)를 전달하는 명령어
		
		kill -[숫자신호|문자신호] [PID|작업번호]
		// 신호가 생략되는 경우 기본적으로 15번 신호를 전달한다.
		
		#kill -l			// 신호의 종류 확인
		2) SIGINT		-	프로세스 종료
		9) SIGKILL		-	프로세스 종료 (강제 종료)
		15) SIGTERM		-   프로세스 종료
		
		18) SIGCONT		-   프로세스 (정지상태)재시작 
		19) SIGSTOP     -   프로세스 정지
		
		#kill -9 1315 			// vim 프로세스에게 강제 종료 신호 전달
		
		#sleep - 입력한 시간 동안 대기 상태 프로세스를 생성하는 명령어
		#sleep [숫자](초)
		
		
		999999초 동안 대기하는 프로세스를 생성하고 kill 명령어를 이용하여
		해당 프로세에게 강제 종료 신호를 보내 대기 상태 빠져나오기
	
		세션-1					세션-2
		
		#sleep 999999			
								#ps -ef | grep "sleep"
								#kill -9 [sleep PID]
								
		
		세션-1		
		#/bin/bash (부모 프로세스)				
		#vi /practice/services (자식 프로세스)
								#ps -ef | grep "vim" 
								// PPID와 PID 확인
								#kill -9 [vim의 PPID]
								
								#ps -ef | grep "vim
								
		  [PID]   [PPID]
	root   1341     1    0 21:55 pts/0    00:00:00 vi /practice/services		
	// 부모 프로세스가 종료되어 고아 프로세스가되고, init 프로세스가 부모 프로세스가 된다.

			   실습
			   아래 명령어 순서 대로 입력 한후 #pstree 명령어 사용하여 결과 확인
               명령어 용도 생각 해보기
			   (1) /bin/bash
			   (2) /bin/bash				   -p (PID)
			   (3) /bin/bash
			   (4) cat /practice/services | more	
		
				// 프로세스의 부모-자식 관계를 트리구조로 출력하여
				   직관적으로 프로세스의 상태를 확인할 수 있다.
				   
	프로세스 동작 형태
		포어 그라운드(Foreground)
			- CLI환경에서는 입력하는 대부분의 명령어(프로그램)는 포어 그라운드로
			  동작 한다.
			- 명령의 실행과정이나 결과를 화면에 출력한다.

			ex) #sleep 99999
				
		백 그라운드 (Background) 
			- 프로세스 종료 여부와 상관없이 즉시 명령 대기 상태가 되어
			  다른 명령어를 사용할 수 있다.
			  
			- 백 그라운드로 실행 시키기 위해 "&" (Ampersand)를 붙여 사용한다.
			  #[명령어] &
			  
			- 장시간 실행되는 명령어 작업에 유용하다.  
			  
			ex) #명령어 &
                [1] 1403
				[작업번호] PID
				
				백그라운드 작업이 시작되면 작업번호와 PID가 출력된다.
				작업이 완료되면 해당 작업번호와 실행 했던 명령어가
				완료가 됬다는(Done)이라는 메세지가 출력된다.
				
			jobs - 백그라운드로 동작하는 프로세스(작업)을 확인하는 명령어
			fg - 백그라운드로 동작하는 작업을 포어그라운드로 변경
				#fg %[작업번호]  // PID 가능
			bg - 포어 그라운드 작업을 백그라운드로 변경 
				#bg %[작업번호]
				
			
			백그라운드 프로세스 생성
			#sleep 99999999 &
			#jobs
			[1]+  Running                 sleep 999999999 &

			백그라운드 -> 포어 그라운드
			#fg %1
			
			포어 그라운드 -> 백 그라운드
			Ctrl + z (포어 그라운드에서 동작중인 작업을 정지시키는 단축키)
			
			[1]+  Stopped                 sleep 999999999
			
			먼저, 중지 후에 백그라운드로 전환해야한다.
			#bg %1	
				
			[1]+ sleep 999999999 &

			#jobs
			[1]+  Running                 sleep 999999999 &
			
			18) SIGCONT		-   프로세스 (정지상태)재시작	
			19) SIGSTOP     -   프로세스 정지
			
			#kill -SIGSTOP %1
			[1]+  Stopped                 sleep 999999999
			// 백그라운드로 동작하고 있는 프로세스는 신호를 전달하여
			   관리 할 수 있다.
			   
			#kill -18 %1
			
			// 백그라운드 작업은 시간이 오래걸리는 작업을 처리해야할때
			   사용할 수 있으며, 이때 주의해야할 점은 서버의 상태를 항상
			   확인 해야한다. (CPU 사용률, RAM 사용률 등)
			   
		/proc 디렉토리
		-시스템에 실행되고 있는 모든 프로세스는 /proc 디렉토리아래서
		 확인 할 수 있다. ( 가상 디렉토리 ) 
		- /proc 디렉토리는 메모리에 저장되어 있는 내용들을 확인할 수 있는
          디렉토리이다. 
		  (커널이 메모리에서 동작하고 있는 프로세스나 정보를 파일로 추상화화여 접근 할 수 있도록 만듬)
		  
		#cd /proc
		#ls		
		// [PID] 구성된 디렉토리는 해당 프로세스에 대한 정보가 있다.
		
		/proc/meminfo 		// 시스템이 사용하는 메모리에대한 정보 파일 
		/proc/cpuinfo		// CPU 정보 파일 
		/proc/version 		// 커널 버전 등을 확인 할 수 있는 파일 
		
		#cat /proc/meminfo
		MemTotal:        1004112 kB		// 설치된 메모리 용량 (1G)
		
		#cat /proc/cpuinfo
		processor	: 0			// 코어 번호 (0번 부터 시작)
								// 0번 코어에대한 정보
		model name	: Intel(R) Core(TM) i5-4460  CPU @ 3.20GHz	
								// CPU 모델명
		cpu cores	: 1			// 코어 개수 
		siblings	: 1			// 논리 코어 개수 (하이퍼 쓰래딩)
		
		#uptime
		 22:51:02 up  1:24,  	2 users,  load average: 0.00, 0.00, 0.00]
		 [현재시간]  [부팅시간] [접속자수] [평균 부하 최근 5/10/15분] 
					 
		ex) CPU 코어 개수 1개 -> 부하  1.00 -> CPU 100% 사용중
									   2.00 -> CPU 100% 사용중이며,
									   1개의 프로세스가 CPU자원을 할당받기
									   위해 대기중이다. 
			
			CPU 코어 개수 2개 -> 부하  1.00 -> CPU 50% 사용중

			EX) CPU 코어 개수 1개 --> load average 2.00 16.00 25.00
				- 최소 15분전에 시스템에 과부하 상태 였다.
				- 현재 부하가 줄어 들고 있다.
				
									  load average 25.00 2.00 1.00
									   
			#top - 시스템 메모리, CPU, 프로세스 상태를 종합적으로 확인/관리 할 수 있는 모니터링 프로그램

				
			#free - 메모리 와 스왑(swap)정보를 확인
				-m (Megabyte)
				-g (Gigabyte)
				
			swap 
				- 메모리 사용률이 100%가 되면 더이상 프로세스를 생성 할 수 없다.
				- 이런 경우 시스템에 큰 문제가 될 수  있기 때문에(서버 정지(hang)나, 프로그램 동작 X) 하드 디스크의 저장 공간 일부를 메모리 처럼 사용할 수있다.
				 (임시 저장 공간)
				 
				보조 기억 -> HDD -> 데이터 영구 저장
                                    읽기/쓰기 속도가 느린 대신, 저장 공간이 크다. 
									(싸다)
									
				주 기억 -> RAM -> 데이터 일시 저장
								  읽기/쓰기 속도가 매우 빠른 대신, 저장 공간이 작다.
								  (비싸다)
					 
				top / free -> swap이 사용중이다 -> 메모리 부족하다 -> 메모리 증설 고려해야한다.
				
		예약 작업 		
			cron  정해진 시간에 설정한 작업 "반복" 실행
			
			#service crond status		// crond 데몬 성태 확인
			// crond 데몬이 동작하고 있어야 예약 작업이 실행 가능
			
			#crontab [option] - crond 데몬이 사용할 테이블(table)을 만들고
								관리하는 명령어
								
				-l	cron 테이블 확인
				-r	cron 테이블 제거
				-e  cron 테이블 편집 
				-u [계정명] 해당 계정의 cron 테이블 확인
			
			- cron 테이블 파일은 사용자 별로 생성되며, 해당 파일에 주기적으로
			  반복할 내용을 작성할 수 있고, 한 라인에 하나의 작업을 설정한다.
			  (각각의 작업을 행으로 구분)
				
			#crontab -l
			no crontab for root

			#crontab -e 			// vi 편집기를 이용하여 설정
			
			총 6개의 필드로 이루어져 있으며, 각 필드를 공백문자로 구분한다.
			
			분		시		일		월		요일 		작업 내용
			0~59    0~23    1~31    1~12    0~6(7)  	[반복할 내용]
			
			- 일요일(0,7), 월요일(1), 토요일(6)
			- " * " 해당 항목의 모든 값을 의미
			ex) 분 필드 -> * -> 매분 (0분~59분)
			
			- " - " 두 숫자 사이의 포함된 범위
			ex) 분 필드 -> 1-5 -> 1분, 2분, 3분, 4분, 5분
			
			- " , " 구분하여 나열된 숫자 중 일치 하는 경우
			ex) 분 필드 -> 1,3,7 -> 1분 3분 7분
			
			- " / " 시간 간격을 지정
			ex) 분 필드 -> 10/2 -> 2,4,6,8,10분 (2분마다, 10분까지)
			
			crontab 예시
			ex) 30 23 1 * * [작업내용]
			- 매요일 매월 1일 23시 30분 [작업내용] 반복하겠다.
			
			ex) */2 10 * * * [작업내용]
			- 매요일 매월 1매일 10시에 2분마다 [작업내용] 반복하겠다.
			
			매요일 매월 매일 오전 12시 1분부터 10까지 (1분마다) [작업내용]을 반복하겠다.
			- 1-10 12 * * * [작업내용]
			- 1,2,3,4,5,6,7,8,9,10 12 * * * [작업내용]
			
			
			crontab 양식
			#cat /etc/crontab 
			
			#mkdir /practice/cron_test
			#crontab -e
			1,2,3 * * * * touch /practice/cron_test/file-1
			
			#date -s "2017-07-17 10:00"
			// 시스템 시간을 변경
			
			// crontab -e 명령어를 이용하야 crontab 규칙을 설정 하면, /var/spool/cron
			   디렉토리에 사용자 이름으로 작업내용을 저장하고 있는 파일 생성된다.
			   
			// 예약작업은 명령어 하나로 해결되는 경우는 거의 없으며
               다양한 명령어나 프로그램이 동작해야 하는 경우가 많다.
               실행해야할 내용이많다면, crontab에 명령어를 직접쓰는 것 보다,
			   스크립트를 만들어 사용하는 것이 좋다.
			   
			스크립트 작성방법
			#vi [스크립트].sh	
	1번행   #!/bin/bash 
    2번행   ~~실행할 내용~~	
				....
				....
				....
				
	스크립를 직접 실행(#sh [스크립트].sh)하는 것이아니라 crond 데몬이 실행해야 하기때문에, 해당 파일에는 실행권한이 있어야한다 . (#chmod a+x [스크립트].sh)

	#mkdir -p /APP/LOG
			  /APP/LOG_BACKUP

	매분마다 파일을 생성하는 스크립트를만든다. ( /root/log_make.sh )
    - 작업 내용 
		touch /APP/LOG/app-log-$(date +F_%T)
		
	 /APP/LOG 디렉토리에 있는 파일을 복사하여 /APP/LOG_BACKUP 에 복사 하고, /APP/LOG 디렉토리에있는 파일을 모두 삭제하는 스크립트를 작성한다.
    ( /root/log_cp_del.sh )
	
	매분마다 log_make.sh가 실행되도록한다.
	매일 5분마다(5분/10분/15분)마다 log_cp_del.sh 가 실행되도록한다.
	
			#crontab -l
			* * * * * /root/log_make.sh
			5 * * * * /root/log_cp_del.sh
			
			#vi /root/log_make.sh
			#!/bin/bash
			touch /APP/LOG/app-log-$(date +%F_%T)
						
			#vi /root/log_cp_del.sh								#chmod a+x /root/log_*
			#!/bin/bash
			cp /APP/LOG/* /APP/LOG_BACKUP/
			rm -f /APP/LOG/*
			
	- 장시간 동작하는 예약 작언은 시스템 부하가 가장 작은 시간대에
      (주로 새벽)설정 하는 것이 좋다.
			
			ex) Server-A (T-MAP) -> 출/퇴근 시간
									출근 7~9시
									퇴근 6~9시
									을 피해서 예약 작업 설정을한다.
	crontab 사용 제한 하기
		/etc/cron.allow , /etc/cron.deny 파일로 사용자가 crontab
		명령어하는 것을 허용(allow), 차단(deny)할 수 있다.
		
		vi 편집기 이용하여 해당 파일을 편집 할 수 있으며,
		한 라인에 하나의 계정명을 입력한다.
		
		/etc/cron.allow 관리자가 직접 생성해야함.
		/etc/cron.deny  파일은 기본적으로 생성되어 있다.
		
		테스트 계정
		#useradd JISOO
		#useradd ROSE			//  /etc/passwd 파일을 확인하여
		#useradd RISA               해당 계정 존재 여부 확인
		
		
		1. RISA 계정이 crontab 명령어를 사용할 수 없도록 차단
		#vi /etc/cron.deny 
		RISA
		:wq
		
			테스트
				#su - RISA
				$crontab -e
				You (RISA) are not allowed to use this program (crontab)
				$exit
				
				#su - ROSE		// deny 파일에 포함되어 있지 않은 계정
				$crontab -e 	// 사용 가능
		
			allow 파일은 없고, deny 파일만 있을 경우,
			deny 파일에 명시되지 않은 사용자만 사용이 가능
				
		2. vi 명령어를 이용하여 /etc/cron.allow 파일을 생성하고
		   해당 파일에는 ROSE계정을 추가하여 사용 가능 여부 확인
		   추가로, JISOO 계정으로 전환하여 crontab 명령어 사용 가능여부 확인
		   
		   #vi /etc/cron.allow
		   ROSE
		   :wq
					테스트
					#su - ROSE
					$crontab -e			// 사용이 가능
					$exit
					
					#su - JISOO
					$crontab -e			// 사용이 불가능
					$exit
			
			/etc/cron.allow 파일이 있을 경우 해당 파일에 명시된
			사용자만 사용 가능. ( 그 외 사용자는 암묵적으로 deny )
			
		3. /etc/cron.allow, /etc/cron.deny 파일을 모두 삭제하고
           일반 사용자계정 (아무거나)으로 crontab 명령어 사용 여부 테스트

		   - 두파일 모두 없을 경우에는 root만 사용이 가능
		
	========================================================================
	
	파일 시스템 관리
	- Server-A 현재 상태 스냅샷으로 저장하기
		Server-A -> 마우스 우클릭 -> Snapshot -> Take Snapshot (디스크 추가전)
		
	파일 시스템
		- 파일이나 데이터를 쉽게 발견 및 접근 할 수 있도록 보관또는
		  조직하는 체제
		    
	리눅스 운영체제에서 사용하는 대표 파일 시스템
		- ext3, ext4, swap, xfs, iso9660, nfs ...
	
	CentOS 6.9버전에서 채택한 기본 파일 시스템 -> ext4
	
	ext4 file system ( EXTended File System 4 )
	- 1EB 최대 파일 시스템 크기와 16TB 크기의 파일을 지원
	- 서브 디렉토리를 64000개 지원, 파일은 약 40억개 지원
		
			MB -> GB -> TB -> PB -> EB  
			   000   000   000   000
	DISK 타입
		- IDE	- CD-ROM, 오래된 HDD (오래된)
		- SATA  
		- SCSI	
		- SAS 						 (최신)
			크기가 작고, 빠르며 안정적이다. (비싸다)
			(서버용)
	
	파티션 (Partition)
		- 하나의 물리적인 디스크를 여러개의 논리적인 디스크로 나누는것
		- 운영체제는 파티션단위로 저장공간을 인식한다.
		
	장치명 (드라이브 문자)
		Windows

		C:\			
		D:\		// 장치명만 확인하여 정확히 몇개의 디스크가 존재하는지
		E:\        확인 할 수 없다. 
		
		Linux
		/dev/sda		// 첫 번째 디스크  (오래된 디스크에서는 /dev/hd 라고
		/dev/sdb		// 두 번째 디스크   표현 하기도함)
		/dev/sdc		// 세 번째 디스크
		
		/dev/sda1		// 첫 번째 디스크에 1번 파티션
		/dev/sda2		// 첫 번째 디스크에 2번 파티션
		/dev/sdb2		// 두 번째 디스크에 2번 파티션
		/dev/sdc4 		// 세 번째 디스크에 4번 파티션
		
		
	목표
	디스크를 추가(증설)하고 파티션과 파일 시스템을 만들어 시스템에서
	사용(인식)할 수 있도록 설정하여 용량 증설이나, RAID, LVM 등을 이용하여
	디스크를 효율적으로, 안전하게 사용할 수 있도록 한다.
			
		
	용량 증설
		1. 디스크 추가 
		VMware Workstation -> Server-A -> 마우스 우클릭 -> Settings
		-> Hard Disk -> add -> 모두 next (용량만설정 나머진 기본값)
		- 1GB 디스크 1개 추가
		
		2. 추가한 디스크를 시스템에 인식시키기 위해 재부팅 (가상 환경)
		// 실제 서버에는 HotSpare, HotPlug 와 같은 기능이 있어 디스크를
		추가하거나 제거할때 재부팅 없이 디스크를 사용 할 수 있다.
		
		#reboot
		
		3. #fdisk 명령어를 이용하 추가 디스크 확인
		   #fdisk - 디스크 파티션을 설정/삭제/확인할때 사용
				-l 시스템이 인식한 모든 디스크의 정보와 파티션 테이블 출력
				
		   #fdisk -l
		   
		   리눅스 파티션
			- 리눅스 파티션은 주(Praimary)파티션과 확장(Extended)파티션,
			  논리(Logical)파티션으로 구성할 수 있다.
			
			- 디스크 하나당 최대 4개의 주파티션을 만들 수 있고, 4개상
			  필요할 경우 확장과 논리 파티션을 이용하여 최대 12개까지 생성이
			  가능하다.
			  
		#fdisk [dev_name]
			
			/dev/sdb 디스크 파티션 구성 계획
			주파티션1 300MB
			주파티션2 300MB
			주파티션3 나머지 전부
			
		#fdisk /dev/sdb	
		// /dev/sdb 디스크에 파티션 설정을 하겠다.
		
		d   delete a partition				// 파티션 삭제
		l   list known partition types		// 파티션 타입 확인
		m   print this menu					// 도움말
		n   add a new partition				// 새로운 파티션 생성
		p   print the partition table		// 파티션 테이블 출력
		q   quit without saving changes		// 저장하지 않고 종료
		t   change a partition's system id	// 파티션 타입 변경
		w   write table to disk and exit	// 저장 후 종료
		
		"n" 새로운 파티션 생성
		Command action
			e   extended
			p   primary partition (1-4)
			
		"p" 주파티션
			Partition number (1-4): 
		"1" 1번 파티션
			First cylinder (1-130, default 1): 
			// 파티션을 시작 위치를 지정, 실린더 기준
		"1" // 디스크의 시작부터 ~ 
			Last cylinder, +cylinders or +size{K,M,G} (1-130, default 130): 
		"+300M"
			// 300MB 지점 까지 파티션을 생성하겠다.
		
		"n" 새로운 파티션
		"p" 주파티션
		"2" 2번 파티션
		
		First cylinder (40-130, default 40): 
		// 실린더 시작 값 40 -> 이전에 파티션이 39까지 사용 했다라는 의미
		   항상 시작 지점은 운영체제가 알려주며, 기본값이 시작지점이기때문에
		   "enter" 입력해도 default 에서 설정되어있는 40이 입력된다.
		Last cylinder, +cylinders or +size{K,M,G} (40-130, default 130): "+300M" 

		"n"	새로운 파티션 
		"p" 주파티션
		"3" 3번
		First cylinder (79-130, default 79):  "enter"
		Last cylinder, +cylinders or +size{K,M,G} (79-130, default 130): 
		"enter" 사용할 수 있는 실린더의 시작 지점부터 끝까지 사용하겠다.
		        즉, 나머지 전부를 사용하여 3번 파티션에 할당 하겠다.
				
		파티션 구성 연습
			/dev/sdb 파티션 정보
				1번 주파티션 200MB
				2번 주파티션 150MB
				3번 주파티션 나머지 전부 
				
	   완성된 파티션 테이블
	   Device Boot         Start         End      Blocks   Id  System
	   /dev/sdb1               1          26      208813+  83  Linux
	   /dev/sdb2              27          46      160650   83  Linux
	   /dev/sdb3              47         130      674730   83  Linux
	   
	   파티션 모두 삭제 진행
	   
	   /dev/sdb 파티션 정보
			1번 주파티션 200MB
			2번 주파티션 150MB
			3번 확장 파티션 나머지 전부 	
			5번 논리 파티션 200MB
			6번 논리 파티션 나머지 전부
			
		파티션 모두 삭제 진행
		/dev/sdb 파티션 정보
		1번 주파티션 500MB
		2번 주파티션 나머지 전부
		
		Device Boot         Start         End      Blocks   Id  System
		/dev/sdb1               1          65      522081   83  Linux
		/dev/sdb2              66         130      522112+  83  Linux
	
		"W" 저장 후 종료
		
		#fdisk -l
		// 파티션 테이블 확인 
		
		4. 파일 시스템 생성
		#mkfs -t [type] [장치명]
		
		#mkfs -t ext4 /dev/sdb1
		#mkfs -t ext4 /dev/sdb2
		// 논리적으로 나눈 디스크에 데이터가 저장되기 위해서는
		   어떠한 방식으로 데이터를 저장하고 관리할 것인지를
		   결정해야한다 (파일 시스템 생성)
		   
		5. 마운트 포인트 생성과 마운트
		마운트 - 특정 디렉토리에 장치를 연결(탑재)하는 것
		
		- 리눅스는 디렉토리로 이루어진 구조에서 각 강치에
          접근 하기 위해서는 생성한 파티션을 디렉토리와 연결 시켜
          사용해야한다.

		마운트 포인트 - 장치와 연결되는 디렉토리
		#mkdir /APP-1 /APP-2
		
		#mount /dev/sdb1 /APP-1
		#mount /dev/sdb2 /APP-2 
		
		#umount [마운트 포인트]
			- 해당 디렉토리와 연결된 장치를 해제한다.
			
		마운트 확인 방법
			#mount
			#df -h 
	
		#reboot					// 추가 테스트를 위해 재부팅
			
		// 실제 서버 컴퓨터는 재부팅을 하는 경우가 거의 없지만
		   재부팅 할 경우 기존에 연결되어있던 마운트 정보가 전부
		   사라진다. 
		   
		// 만약 서비스 프로그램이 사용하는 파일이 마운트되어있던
		   공간에 위치해있다면 해당 프로그램이 정상적으로 동작할 수
		   없다. 
		   
		// 긴급한 상황에서 마운트를 다시해야 할때 기존에
           연결된 장치와 디렉토리를 확인 하기 어려워
		   문제해결에 어려움이 발생한다.
		   
		6. /etc/fstab 파일에 마운트 정보 등록
		- 부팅 시 마운트할 파티션의 정보가 저장되어 있는 파일
		- /etc/fstab 파일에 기록되어 있는 순서대로 각 장치와
		  디렉토리가 연결되어 디렉토리 구조가 만들어진다.
		  
		[대상] [마운트포인트] [파일시스템] [옵션] [덤프] [파일시스템검사]

		1. 대상
			- 저장 공간(장치)에 접근하기 위한 파일의 경로, LABEL, UUID가
			올 수 있다.
			ex) /dev/sdb1, /dev/sdd2
		
		2. 마운트 포인트
			 - 장치가 연결되는 디렉토리
			 ex) /APP-1, /Backup, /home/TEST

		3. 파일 시스템 타입
			 - 해당 장치에 구성된 파일 시스템 타입 (mkfs)
			 ex) ext4, ext3 , xfs 등 ...
			 
		4. 옵션
			- 마운트 옵션
			- 보통 defaults 옵션을 사용하며, 기본 적으로 사용하는 옵션을
			  묶어 놓은 옵션 ( rw, suid, dev, exec, nouser, async )
			  
		5. 덤프(dump) 생성 유무
			- 해당 장치에 문제가 발생 할 경우, 문제 분석에 사용 될 수 있는
			  파일 (덤프)를 생성 할 것지를 숫자로 나타냄.
			  
			  0 덤프 파일 생성 안함
			  1 덤프 파일 생성 			// 중요한 파티션이 아니라면 보통
			                               사용하지 않음
		6. 파일 시스템 검사 유무
			- 부팅 시 해당 장치에 문제가 있는지 검사하는 옵션
			
			0	- 검사 하지 않음
			1   - 검사, 우선순위 높음		// 대부분 "/" 디렉토리가
			2   - 검사, 우선순위 낮음          마운트되어있는 장치에 할당
				
			// 부팅 시 각각의 장치를 검사하면 부팅 속도가 느려져
		       해당 옵션은 보통 사용하지 않음 
										   
     [대상] [마운트포인트] [파일시스템] [옵션] [덤프] [파일시스템검사]	
	 #vi /etc/fstab
	 ~~~~ 하단에 아래 내용 추가 ~~~~~~~
	 /dev/sdb1 /APP-1 ext4 defaults 0 0
	 /dev/sdb2 /APP-2 ext4 defaults 0 0 
	 
	 // 해당 파일에 오타가나면 부팅과정에서 디렉토리 구조를 완성할
	    수없어 부팅이 되지 않을 수 있으니 조심
	
	#reboot		
	#df -h		// 부팅 후에도 마운트가 되어있다면 성공
	
	UUID (Universial Unique IDentifier )
	- 범용 고유 식별자
	- 특정 장치나 설정에 사용할 수 있는 고유한 값
	- 절대 중복되지 않아 특별한 장치를 구분할때 사용
	
	- 디스크 추가/제거 작업 시 장치명이 변경되어 마운트가 되지
	  않거나 부팅이 되지 않는 현상을 방지 할 수 있다.
	  (장치명은 언제든지 변경될 수 있어 잘못된 곳에 마운트될 수 있음)

	UUID 확인
		#blkid				// 모든 파티션의 UUID 정보 확인
		#blkid [장치명]		// 지정한 파티션의 UUID 확인
			ex) #blkid /dev/sdb1 
			// 파일 시스템을 생성할때 할당된다.
			
/dev/sdb1: UUID="3c75a9ff-c30a-4371-9052-267e932933c8" TYPE="ext4" 
/dev/sdb2: UUID="0e8c0e7c-5a1e-4a98-94e6-97eefcba8244" TYPE="ext4" 

	#vi /etc/fstab
		변경 전
		/dev/sdb1 /APP-1 ext4 defaults 0 0
		/dev/sdb2 /APP-2 ext4 defaults 0 0
		
		변경 후
		UUID=3c75a9ff-c30a-4371-9052-267e932933c8 /APP-1 ext4 defaults 0 0
		UUID=0e8c0e7c-5a1e-4a98-94e6-97eefcba8244 /APP-2 ext4 defaults 0 0
		// 장치명 대신 UUID를 사용
	 
	디스크 증설 작업
	(1) 디스크 추가
	(2) 재부팅 (디스크 인식)
	(3) 파티션 생성
	(4) 파일 시스템 생성
	(5) 마운트 포인트
	(6) 마운트
	(7) UUID 확인
	(8) /etc/fstab 마운트 정보 등록
		
		
		
										   
										   
			                             
		   
		
		  
			  
			  
		   
		   
		   
		   
		   
	
		
		
		
		
		
		
		
		
		
		
		
				
					 
					 
		
		
		
		
		