

	파일 생성 스크립트
	#mkdir -p /practice/find/{file,xargs}
	#vi /practice/find/file/file_make.sh
	
	#!/bin/bash
	for z in $(seq 0 7); do
		for i in $(seq 0 7); do
			for j in $(seq 0 7); do
				touch ${z}${i}${j}
				chmod ${z}${i}${j} ${z}${i}${j}
			done;
		done;
	done;
	
	#cd /practice/find/file/
	#ls
	file_make.sh
	#sh file_make.sh			// 스크립트 실행

	#vi /practice/find/xargs/xargs_test.sh
	
	#!/bin/bash
	// 아래 내용을 어떤 쉘로 실행하겠다라는 의미
	// 실제 쉘이 위치한 경로를 명시하며, 셔뱅이라고 불름
	// bash 쉘이 아래 작성한 내용을 해석하여 처리함	
	for z in $(seq 0 5); do
		fallocate -l 10k "$RANDOM.txt"
	done;
	
	for z in $(seq 0 5); do
		fallocate -l 15k "$RANDOM.txt"
	done;
	
	for z in $(seq 0 5); do
		fallocate -l 20k "$RANDOM.txt"
	done;
	
	#cd /practice/find/xargs/
	#ls
	xargs_test.sh
	#sh xargs_test.sh
	
	find - 파일 검색
		
		#find [경로] [옵션] [인자] [명령]
		
		-perm 지정한 허가권을 가지고 있는 파일 검색
		
		#cd /practice/find/file/
		
		#find /practice/find/file/ -perm 777 	( rwx rwx rwx ) 
		// -perm [허가권] 정확히 허가권과 일치하는 파일을 검색
		
		#find /practice/find/file -perm +770
		
		#find /practice/find/file -perm +770 | sort | more
										 
							770 ( rwx rwx --- ) 
		/practice/find/file/010 ( --- --x --- )
		/practice/find/file/011 ( --- --x --x )
		/practice/find/file/012 ( --- --x -w- )
		/practice/find/file/013 ( --- --x -wx )
		~~~~~~~~~생략~~~~~~~~~~
		
							검색되지 않은 파일
							000 ( --- --- --- )
							001 ( --- --- --x )
							002 ( --- --- -w- )
		// -perm +[허가권] 지정한 허가권에서 하나의 값이라도
		   일치하는 파일을 검색
		  
		#find /practice/find/file -perm -770 | sort
		
		/practice/find/file/770	(rwx rwx ---)		
		/practice/find/file/771 (rwx rwx --x) 
		/practice/find/file/772 (rwx rwx -w-)
		/practice/find/file/773 (rwx rwx -wx) 
		~~~~~~~~~~생략~~~~~~~~~
		// -perm -[허가권] 지정한 허가권을 포함한 추가적인 허가권을 가진 파일
		
		/bin 경로에 위치한 SetUID가 설정되어있는 파일 검색
		
		#find /bin -perm -4000	> /root/setuid_list.txt
		
		#cd /practice/find/xargs/
		
		-size 파일 크기를 기준으로 검색
		아래 명령어를 사용 한 후, 검색된 결과에 해당하는 파일의 용량을
		확인 하여 10k, +15k, -15k가 어떻게 동작하는지 알아본다.
		
		#find /practice/find/xargs -size 10k
		// 정확히 10kb 크기를 가진 파일 검색
		
		#find /practice/find/xargs -size +15k
		// 15kb를 초과한 파일 검색
		
		#find /practice/find/xargs -size -15k
		// 15kb 미만 크기를 가진 파일 검색
		
		현재 시스템에서 50MB를 초과하는 파일 검색
		#find / -size +50M
		
		#mkdir /practice/find/test
		#cd /practice/find/test
		#touch file{1..3}
		#ls
		file1 file2 file3
		
		find 명령
			-delete					// 검색 결과를 삭제
			-exec [명령어] \;		// 검색 결과를 지정한 명령어로 처리
			-exec [명령어] {} \;	// 검색 결과를 차례대로 매칭하면서
			                           지정한 명령어를 실행
									   
			-name "[파일명]"	
			// 파일의 이름을 기준으로 검색
			
			#find . -name "file*" 
			#find . -name "file*" -delete
			// 검색된 결과를 삭제한다.
			
			#touch file{1..3}
			#ls
			file1 file2 file3
			
			-exec [명령어] \;		//   \; <- 명령어의 끝을 나타냄
			#find . -name "file*" -exec ls -l \;
			
			// 검색된 결과가 있을때 [명령어] 실행
			#ls -l
			#ls -l
			#ls -l
			
			-exec [명령어] {} \;						   			   
			#find . -name "file*" -exec ls -l {} \;
			./file1
			./file2
			./file3
			
			#ls -l ./file1		//	ls -l {./file1} 
			#ls -l ./file2
			#ls -l ./file3
			
			#cd /practice/find/file			( 000 ~ 777 파일이 존재함 )
			1. find 명령어를 이용하여 파일의 이름이 0으로 시작해서 1로끝나는 파일을 삭제
			
			#find /practice/find/file -name "0*1" -delete
			#find /practice/find/file -name "0*1" -exec rm {} \;
	
			2. 파일의 이름이 7로 끝나는 파일을 gzip으로 압축
				#gzip [파일명]			// [파일명].gz
			
			#find /practice/find/file -name "*7" -exec gzip {} \;
			007
			017			// gzip 017
			027
			#gunzip *7.gz			// 압축해제
			
		퀴즈
		#cd /practice/find/xargs
		1. find를 사용하지 않고 파일의 크기가 10kb인 파일명만 출력하고
		   정렬한 내용을 10kb_file_list1.txt로 저장하는 명령어
		   
		   ex) 출력결과 11111.txt			// 정확히 "파일의 이름"만 나오도록
		   
		   #ll -h | grep 10K | cut -d " " -f 8 | sort -n > /root/10kb_file_list1.txt
		   
		2.  find를 사용하여 파일의 크기가 10kb인 파일명만 출력하고
			정렬한 내용을 10kb_file_list2.txt로 저장하는 명령어
			
			#find . -size 10k | cut -d "/" -f 2 | sort -n > /root/10kb_file_list2.txt
		
		   [1]    [2]
			.   / 123123.txt
			
			#basename [경로/파일명]
				- 경로와 파일명이 입력됬을때 경로는 제거하고 파일명만 출력해주는 명령어
				ex) #basename /etc/sysconfig/network-scripts/ifcfg-eth0
					ifcfg-eth0
					// 입력된 내용 중 디렉토리는 모두 제거되고 파일명만 출력됨 
			
			#find . -size 10k -exec basename {} \; | sort -n > /root/10kb_file_list2.txt
	
		3. find를 사용하여 크기가 15kb인 파일을 삭제
			#find -size 15k -delete
			#find -size 15k -exec rm {} \;
	
		4. find를 사용하지 않고 크기가 20kb인 파일을 삭제	
		
		(1) #ll -h | grep "20K"			// 20kb 파일 검색
		(2) #ll -h | grep "20K" | cut -d " " -f 8
			// 출력결과에서 공백을 기준으로 8번째 필드만 출력 (파일명만 출력)
			// ex) 123.txt
			   ex) 456.txt
		(3) #ll -h | grep "20K" | cut -d " " -f 8 | xargs rm
			출력결과(파일명)를 다음 명령어인 rm 의 인자로 사용하기 위해 xargs 사용
			
			출력결과 
			123.txt		xargs   rm [출력결과]
		    456.txt				
			
			#ll -h 			// 20kb 파일 삭제 확인
			
		xargs (eXtended Argruments) 
			- 표준 출력의 값을 이용하여 다음 명령어의 인자로 전달
			- find 와 사용 시 검색 결과를 다음 명령어의 인자로 잔달 ( -exec {} \; )
			- 여러 명령어와 함께 조합을 하면 강력한 기능 갖는다.
			
			-i 표준 출력을 인자로 전달 -> {} 사용 시
			-t 명령어 실행 과정을 화면에 출력
			
			#cd /practice/find/file		( 000 ~ 777 파일 )
			#vi 202
			Linux
			
			#find . -type f -name "*" | xargs grep "Linux"
			
				-type 파일의 종류를 기준으로 검색 
						f - 일반 파일
						d - 디렉토리
						l - 링크
			
			[파일명]:[결과]
			./202:Linux
						   
			#find . -type f -name "*"
			./000
			./001
			.....										grep "패턴" [파일명]
			./777						| xargs grep "Linux" ./000 
															  .....
															 ./777 
	
			// 파일의 이름이나, 정보가 없어도 "패턴"을 기준으로 찾을 수 있다.
			
			/etc/passwd
		     계정명
			[root]:x:0:0:root:/root:/bin/bash
				
				#find /etc -name "*" | xargs grep "x:0:0:root:/root:/bin/bash"
				
				/etc/passwd:root:x:0:0:root:/root:/bin/bash 
			
		#cd /practice/find/file 	( 000 ~ 777 )
		#rm -f file_make.sh
		// 원활한 실습을 위해 파일 삭제
		// 000 ~ 777 파일 외에 모든 파일 삭제
		
		실습) 
			현재 경로에있는 파일(000 ~ 777)에 확장자(.txt) 붙이기
				ex) 111 	--> 	111.txt 
					000 	-->		000.txt 
					
					#mv 111 111.txt
			
					#ls | xargs -t -i mv {} {}.txt
					
					ls 				mv {000} {000}.txt
					000
					001
					002
					...
					777
				
				원상 복구
				000.txt		-->	000			#mv {000}.txt {000}
				
				ls
				000.txt
				001.txt
				...
				777.txt
							    #ls | cut -d "." -f 1 
								[1]       [2] 
								777   .   txt
					
				#ls | cut -d "." -f 1 | xargs -t -i mv {}.txt {}
				
				
				
	    - 실무 환경에서는 서버 컴퓨터의 상태를 항상 모니터링 하고 있는 시스템이 있다.
		- 특정 서버에 "/" 루트 파티션의 용량이 부족하다라는 내용의 알람메세지가 전송.
					
					/ 85% -> minor
					  90% -> major 
					  95% -> critical
					  
					  #df -h 		/  300G -> 99%
					  
					  #du -s (요약)	[경로]
					      -h (용량 단위)
				
						/APP 	디렉토리는 서버 프로그램이 동작하는 디렉토리로 사용하자
						        약속한 상태
								
						/APP 299G
						
						#cd /APP
						#ls
						log lib core file		// 서버가 프로그램이 동작하는 필요한
												   파일을 저장하는 디렉토리
						#du -sh /APP/*
						log 300M
						lib 100M
						core 298G				
						
						#cd core
						#ls
						a23-4903294
						v209384092834
						csxvsdfsf2394820394
						234902834098dfweuro
						23948209348asdfksdfjk
						239048029384fwerwerwer	(1MB)
						
						#ls -lh
						
						#rm -rf ./*
						too many arguments		// 인자가 너무 많다.
						
						#rm -rf ./a*
						too many arguments
						
						#ls | xargs rm
						

						#rm -rf  csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 csxvsdfsf2394820394 
	
						#rm csxvsdfsf2394820394
						#rm csxvsdfsf2394820394
						#rm csxvsdfsf2394820394
						
						#free
						#top 
						
						
						
				
				
				
				
				
				
				
				
				
				
				
				
				
			
	
	
	